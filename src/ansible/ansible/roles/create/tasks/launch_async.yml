---

  - name: initialize security group
    include: create_security_group.yml

  - name: Create master instance with ip pool
    os_server:
      state: present
      name: "{{ cluster_name }}-master"
      image: "{{ os_image }}"
      flavor: "{{ master_flavor }}"
      key_name: "{{ os_key_name }}"
      network: "{{ virtual_network }}"
      boot_from_volume: "{{ boot_from_volume }}"
      security_groups: "{{ cluster_name }}"
      auto_ip: False
      meta: "hostname={{ cluster_name }}-master,group={{ cluster_name }}_master"
    retries: 3
    async: 300
    poll: 0
    register: master_waitress

  - name: Create slave instances
    os_server:
      state: present
      name: "{{ item }}"
      image: "{{ os_image }}"
      flavor: "{{ flavor }}"
      key_name: "{{ os_key_name }}"
      network: "{{ virtual_network }}"
      boot_from_volume: "{{ boot_from_volume }}"
      security_groups: "{{ cluster_name }}"
      auto_ip: False
      meta: "hostname={{ item }},group={{ cluster_name }}_slaves"
    with_sequence: start=1 end={{ n_slaves }} format={{ cluster_name }}-slave-%d
    delay: 1
    retries: 3
    async: 300
    poll: 0
    register: slave_waitress

  - name: Create fanlight instance
    os_server:
      state: present
      name: "{{ cluster_name }}-fanlight"
      image: "{{ os_image }}"
      flavor: "{{ master_flavor }}"
      key_name: "{{ os_key_name }}"
      network: "{{ virtual_network }}"
      boot_from_volume: "{{ boot_from_volume }}"
      security_groups: "{{ cluster_name }}"
      auto_ip: False
      meta: "hostname={{ cluster_name }}-fanlight,group={{ cluster_name }}_fanlight"
    retries: 3
    async: 300
    poll: 0
    register: fanlight_waitress
    when: create_fanlight is defined and create_fanlight == true

  - name: Create storage instance
    os_server:
      state: present
      name: "{{ cluster_name }}-storage"
      image: "{{ os_image }}"
      flavor: "{{ master_flavor }}"
      key_name: "{{ os_key_name }}"
      network: "{{ virtual_network }}"
      boot_from_volume: "{{ boot_from_volume }}"
      security_groups: "{{ cluster_name }}"
      auto_ip: False
      meta: "hostname={{ cluster_name }}-storage,group={{ cluster_name }}_storage"
    retries: 3
    async: 300
    poll: 0
    register: storage_waitress
    when: create_storage is defined and create_storage == true

  - name: 'Checking master instance started'
    async_status: jid={{ master_waitress.ansible_job_id }}
    register: mstr
    until: mstr.finished
    retries: 60
    delay: 5

  - name: 'Checking slaves started'
    async_status: jid={{ item.ansible_job_id }}
    register: slv
    until: slv.finished
    retries: 60
    delay: 5
    with_items: "{{ slave_waitress.results }}"

  - name: 'Checking fanlight started'
    async_status: jid={{ fanlight_waitress.ansible_job_id }}
    register: fanlight_start
    until: fanlight_start.finished
    retries: 60
    delay: 5
    when: create_fanlight is defined and create_fanlight == true

  - name: 'Checking storage started'
    async_status: jid={{ storage_waitress.ansible_job_id }}
    register: storage_start
    until: storage_start.finished
    retries: 60
    delay: 5
    when: create_storage is defined and create_storage == true

  - name: 'Acquiring floating IPs for master instance'
    os_floating_ip:
      state: present
      reuse: yes
      server: "{{ cluster_name }}-master"
      network: "{{ floating_ip_pool }}"
      wait: no
      timeout: 60
    delay: 1
    retries: 3
    async: 60
    poll: 1
    register: master_ip_waitress
    when: floating_ip_pool != 'None'

  - name: 'Acquiring floating IPs for slave instances'
    os_floating_ip:
      state: present
      reuse: yes
      server: "{{ item }}"
      network: "{{ floating_ip_pool }}"
      wait: no
      timeout: 20
    with_sequence: start=1 end={{ n_slaves }} format={{ cluster_name }}-slave-%d
    retries: 3
    delay: 1
    async: 60
    poll: 1
    register: slave_ip_waitress
    when: floating_ip_pool != 'None'

  - name: 'Acquiring floating IPs for fanlight instance'
    os_floating_ip:
      state: present
      reuse: yes
      server: "{{ cluster_name }}-fanlight"
      network: "{{ floating_ip_pool }}"
      wait: True
      timeout: 60
    retries: 3
    delay: 1
    async: 60
    poll: 1
    register: fanlight_ip_waitress
    when: floating_ip_pool != 'None' and create_fanlight is defined and create_fanlight == true

  - name: 'Acquiring floating IPs for storage instance'
    os_floating_ip:
      state: present
      reuse: yes
      server: "{{ cluster_name }}-storage"
      network: "{{ floating_ip_pool }}"
      wait: True
      timeout: 60
    retries: 3
    delay: 1
    async: 60
    poll: 1
    register: storage_ip_waitress
    when: floating_ip_pool != 'None' and create_storage is defined and create_storage == true

  - name: 'Waiting for master IP'
    async_status: jid={{ master_ip_waitress.ansible_job_id }}
    register: mstr
    until: mstr.finished
    retries: 60
    delay: 1
    when: floating_ip_pool != 'None'

  - name: 'Waiting for slave IPs'
    async_status: jid={{ item.ansible_job_id }}
    register: slv
    until: slv.finished
    retries: 60
    delay: 1
    with_items: "{{ slave_ip_waitress.results }}"
    when: floating_ip_pool != 'None'

  - name: 'Waiting for fanlight IP'
    async_status: jid={{ fanlight_ip_waitress.ansible_job_id }}
    register: fanlight_ip
    until: fanlight_ip.finished
    retries: 60
    delay: 1
    when: floating_ip_pool != 'None' and create_fanlight is defined and create_fanlight == true

  - name: 'Waiting for storage IP'
    async_status: jid={{ storage_ip_waitress.ansible_job_id }}
    register: storage_ip
    until: storage_ip.finished
    retries: 60
    delay: 1
    when: floating_ip_pool != 'None' and create_storage is defined and create_storage == true