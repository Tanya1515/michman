// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protofile.proto

package ansible

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Service struct {
	Name                 string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Version              string   `protobuf:"bytes,2,opt,name=Version,proto3" json:"Version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Service) Reset()         { *m = Service{} }
func (m *Service) String() string { return proto.CompactTextString(m) }
func (*Service) ProtoMessage()    {}
func (*Service) Descriptor() ([]byte, []int) {
	return fileDescriptor_b28b201cc727c47d, []int{0}
}

func (m *Service) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Service.Unmarshal(m, b)
}
func (m *Service) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Service.Marshal(b, m, deterministic)
}
func (m *Service) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Service.Merge(m, src)
}
func (m *Service) XXX_Size() int {
	return xxx_messageInfo_Service.Size(m)
}
func (m *Service) XXX_DiscardUnknown() {
	xxx_messageInfo_Service.DiscardUnknown(m)
}

var xxx_messageInfo_Service proto.InternalMessageInfo

func (m *Service) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Service) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type Cluster struct {
	Name   string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Slaves int32  `protobuf:"varint,2,opt,name=Slaves,proto3" json:"Slaves,omitempty"`
	//    repeated Service services = 3;
	Status               string   `protobuf:"bytes,3,opt,name=Status,proto3" json:"Status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Cluster) Reset()         { *m = Cluster{} }
func (m *Cluster) String() string { return proto.CompactTextString(m) }
func (*Cluster) ProtoMessage()    {}
func (*Cluster) Descriptor() ([]byte, []int) {
	return fileDescriptor_b28b201cc727c47d, []int{1}
}

func (m *Cluster) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Cluster.Unmarshal(m, b)
}
func (m *Cluster) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Cluster.Marshal(b, m, deterministic)
}
func (m *Cluster) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cluster.Merge(m, src)
}
func (m *Cluster) XXX_Size() int {
	return xxx_messageInfo_Cluster.Size(m)
}
func (m *Cluster) XXX_DiscardUnknown() {
	xxx_messageInfo_Cluster.DiscardUnknown(m)
}

var xxx_messageInfo_Cluster proto.InternalMessageInfo

func (m *Cluster) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Cluster) GetSlaves() int32 {
	if m != nil {
		return m.Slaves
	}
	return 0
}

func (m *Cluster) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func init() {
	proto.RegisterType((*Service)(nil), "ansible.Service")
	proto.RegisterType((*Cluster)(nil), "ansible.Cluster")
}

func init() { proto.RegisterFile("protofile.proto", fileDescriptor_b28b201cc727c47d) }

var fileDescriptor_b28b201cc727c47d = []byte{
	// 175 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2f, 0x28, 0xca, 0x2f,
	0xc9, 0x4f, 0xcb, 0xcc, 0x49, 0xd5, 0x03, 0xb3, 0x84, 0xd8, 0x13, 0xf3, 0x8a, 0x33, 0x93, 0x72,
	0x52, 0x95, 0xcc, 0xb9, 0xd8, 0x83, 0x53, 0x8b, 0xca, 0x32, 0x93, 0x53, 0x85, 0x84, 0xb8, 0x58,
	0xfc, 0x12, 0x73, 0x53, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0xc0, 0x6c, 0x21, 0x09, 0x2e,
	0xf6, 0xb0, 0xd4, 0xa2, 0xe2, 0xcc, 0xfc, 0x3c, 0x09, 0x26, 0xb0, 0x30, 0x8c, 0xab, 0xe4, 0xcb,
	0xc5, 0xee, 0x9c, 0x53, 0x5a, 0x5c, 0x92, 0x5a, 0x84, 0x55, 0xa3, 0x18, 0x17, 0x5b, 0x70, 0x4e,
	0x62, 0x59, 0x6a, 0x31, 0x58, 0x1f, 0x6b, 0x10, 0x94, 0x07, 0x16, 0x2f, 0x49, 0x2c, 0x29, 0x2d,
	0x96, 0x60, 0x06, 0xab, 0x86, 0xf2, 0x8c, 0x5c, 0xb9, 0x78, 0x1d, 0x21, 0x4e, 0x0a, 0x2a, 0xcd,
	0xcb, 0x4b, 0x2d, 0x12, 0x32, 0xe1, 0xe2, 0x0a, 0x2a, 0xcd, 0x83, 0x8a, 0x09, 0x09, 0xe8, 0x41,
	0x1d, 0xac, 0x07, 0xb5, 0x54, 0x0a, 0x43, 0x44, 0x89, 0xc1, 0x80, 0x31, 0x89, 0x0d, 0xec, 0x3d,
	0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x47, 0x30, 0x3c, 0xe1, 0xf1, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AnsibleRunnerClient is the client API for AnsibleRunner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AnsibleRunnerClient interface {
	RunAnsible(ctx context.Context, in *Cluster, opts ...grpc.CallOption) (AnsibleRunner_RunAnsibleClient, error)
}

type ansibleRunnerClient struct {
	cc *grpc.ClientConn
}

func NewAnsibleRunnerClient(cc *grpc.ClientConn) AnsibleRunnerClient {
	return &ansibleRunnerClient{cc}
}

func (c *ansibleRunnerClient) RunAnsible(ctx context.Context, in *Cluster, opts ...grpc.CallOption) (AnsibleRunner_RunAnsibleClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AnsibleRunner_serviceDesc.Streams[0], "/ansible.AnsibleRunner/RunAnsible", opts...)
	if err != nil {
		return nil, err
	}
	x := &ansibleRunnerRunAnsibleClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AnsibleRunner_RunAnsibleClient interface {
	Recv() (*Cluster, error)
	grpc.ClientStream
}

type ansibleRunnerRunAnsibleClient struct {
	grpc.ClientStream
}

func (x *ansibleRunnerRunAnsibleClient) Recv() (*Cluster, error) {
	m := new(Cluster)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AnsibleRunnerServer is the server API for AnsibleRunner service.
type AnsibleRunnerServer interface {
	RunAnsible(*Cluster, AnsibleRunner_RunAnsibleServer) error
}

// UnimplementedAnsibleRunnerServer can be embedded to have forward compatible implementations.
type UnimplementedAnsibleRunnerServer struct {
}

func (*UnimplementedAnsibleRunnerServer) RunAnsible(req *Cluster, srv AnsibleRunner_RunAnsibleServer) error {
	return status.Errorf(codes.Unimplemented, "method RunAnsible not implemented")
}

func RegisterAnsibleRunnerServer(s *grpc.Server, srv AnsibleRunnerServer) {
	s.RegisterService(&_AnsibleRunner_serviceDesc, srv)
}

func _AnsibleRunner_RunAnsible_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Cluster)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AnsibleRunnerServer).RunAnsible(m, &ansibleRunnerRunAnsibleServer{stream})
}

type AnsibleRunner_RunAnsibleServer interface {
	Send(*Cluster) error
	grpc.ServerStream
}

type ansibleRunnerRunAnsibleServer struct {
	grpc.ServerStream
}

func (x *ansibleRunnerRunAnsibleServer) Send(m *Cluster) error {
	return x.ServerStream.SendMsg(m)
}

var _AnsibleRunner_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ansible.AnsibleRunner",
	HandlerType: (*AnsibleRunnerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RunAnsible",
			Handler:       _AnsibleRunner_RunAnsible_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protofile.proto",
}
