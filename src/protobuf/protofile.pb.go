// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protofile.proto

package ansible

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Cluster struct {
	ID                   string     `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name                 string     `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	DisplayName          string     `protobuf:"bytes,3,opt,name=DisplayName,proto3" json:"DisplayName,omitempty"`
	HostURL              string     `protobuf:"bytes,4,opt,name=HostURL,proto3" json:"HostURL,omitempty"`
	EntityStatus         string     `protobuf:"bytes,5,opt,name=EntityStatus,proto3" json:"EntityStatus,omitempty"`
	ClusterType          string     `protobuf:"bytes,6,opt,name=ClusterType,proto3" json:"ClusterType,omitempty"`
	Services             []*Service `protobuf:"bytes,7,rep,name=services,proto3" json:"services,omitempty"`
	NHosts               int32      `protobuf:"varint,8,opt,name=NHosts,proto3" json:"NHosts,omitempty"`
	MasterIP             string     `protobuf:"bytes,9,opt,name=masterIP,proto3" json:"masterIP,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Cluster) Reset()         { *m = Cluster{} }
func (m *Cluster) String() string { return proto.CompactTextString(m) }
func (*Cluster) ProtoMessage()    {}
func (*Cluster) Descriptor() ([]byte, []int) {
	return fileDescriptor_b28b201cc727c47d, []int{0}
}

func (m *Cluster) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Cluster.Unmarshal(m, b)
}
func (m *Cluster) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Cluster.Marshal(b, m, deterministic)
}
func (m *Cluster) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cluster.Merge(m, src)
}
func (m *Cluster) XXX_Size() int {
	return xxx_messageInfo_Cluster.Size(m)
}
func (m *Cluster) XXX_DiscardUnknown() {
	xxx_messageInfo_Cluster.DiscardUnknown(m)
}

var xxx_messageInfo_Cluster proto.InternalMessageInfo

func (m *Cluster) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Cluster) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Cluster) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *Cluster) GetHostURL() string {
	if m != nil {
		return m.HostURL
	}
	return ""
}

func (m *Cluster) GetEntityStatus() string {
	if m != nil {
		return m.EntityStatus
	}
	return ""
}

func (m *Cluster) GetClusterType() string {
	if m != nil {
		return m.ClusterType
	}
	return ""
}

func (m *Cluster) GetServices() []*Service {
	if m != nil {
		return m.Services
	}
	return nil
}

func (m *Cluster) GetNHosts() int32 {
	if m != nil {
		return m.NHosts
	}
	return 0
}

func (m *Cluster) GetMasterIP() string {
	if m != nil {
		return m.MasterIP
	}
	return ""
}

type Service struct {
	ID                   string            `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name                 string            `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Type                 string            `protobuf:"bytes,3,opt,name=Type,proto3" json:"Type,omitempty"`
	ClusterRef           string            `protobuf:"bytes,4,opt,name=ClusterRef,proto3" json:"ClusterRef,omitempty"`
	ServiceState         string            `protobuf:"bytes,5,opt,name=ServiceState,proto3" json:"ServiceState,omitempty"`
	ServiceURL           string            `protobuf:"bytes,6,opt,name=ServiceURL,proto3" json:"ServiceURL,omitempty"`
	Config               map[string]string `protobuf:"bytes,7,rep,name=Config,proto3" json:"Config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DisplayName          string            `protobuf:"bytes,8,opt,name=DisplayName,proto3" json:"DisplayName,omitempty"`
	EntityStatus         string            `protobuf:"bytes,9,opt,name=EntityStatus,proto3" json:"EntityStatus,omitempty"`
	Version              string            `protobuf:"bytes,10,opt,name=Version,proto3" json:"Version,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Service) Reset()         { *m = Service{} }
func (m *Service) String() string { return proto.CompactTextString(m) }
func (*Service) ProtoMessage()    {}
func (*Service) Descriptor() ([]byte, []int) {
	return fileDescriptor_b28b201cc727c47d, []int{1}
}

func (m *Service) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Service.Unmarshal(m, b)
}
func (m *Service) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Service.Marshal(b, m, deterministic)
}
func (m *Service) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Service.Merge(m, src)
}
func (m *Service) XXX_Size() int {
	return xxx_messageInfo_Service.Size(m)
}
func (m *Service) XXX_DiscardUnknown() {
	xxx_messageInfo_Service.DiscardUnknown(m)
}

var xxx_messageInfo_Service proto.InternalMessageInfo

func (m *Service) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Service) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Service) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Service) GetClusterRef() string {
	if m != nil {
		return m.ClusterRef
	}
	return ""
}

func (m *Service) GetServiceState() string {
	if m != nil {
		return m.ServiceState
	}
	return ""
}

func (m *Service) GetServiceURL() string {
	if m != nil {
		return m.ServiceURL
	}
	return ""
}

func (m *Service) GetConfig() map[string]string {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *Service) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *Service) GetEntityStatus() string {
	if m != nil {
		return m.EntityStatus
	}
	return ""
}

func (m *Service) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type TaskStatus struct {
	Status               string   `protobuf:"bytes,1,opt,name=Status,proto3" json:"Status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskStatus) Reset()         { *m = TaskStatus{} }
func (m *TaskStatus) String() string { return proto.CompactTextString(m) }
func (*TaskStatus) ProtoMessage()    {}
func (*TaskStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_b28b201cc727c47d, []int{2}
}

func (m *TaskStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskStatus.Unmarshal(m, b)
}
func (m *TaskStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskStatus.Marshal(b, m, deterministic)
}
func (m *TaskStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskStatus.Merge(m, src)
}
func (m *TaskStatus) XXX_Size() int {
	return xxx_messageInfo_TaskStatus.Size(m)
}
func (m *TaskStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskStatus.DiscardUnknown(m)
}

var xxx_messageInfo_TaskStatus proto.InternalMessageInfo

func (m *TaskStatus) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type NewID struct {
	ID                   int32    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NewID) Reset()         { *m = NewID{} }
func (m *NewID) String() string { return proto.CompactTextString(m) }
func (*NewID) ProtoMessage()    {}
func (*NewID) Descriptor() ([]byte, []int) {
	return fileDescriptor_b28b201cc727c47d, []int{3}
}

func (m *NewID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewID.Unmarshal(m, b)
}
func (m *NewID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewID.Marshal(b, m, deterministic)
}
func (m *NewID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewID.Merge(m, src)
}
func (m *NewID) XXX_Size() int {
	return xxx_messageInfo_NewID.Size(m)
}
func (m *NewID) XXX_DiscardUnknown() {
	xxx_messageInfo_NewID.DiscardUnknown(m)
}

var xxx_messageInfo_NewID proto.InternalMessageInfo

func (m *NewID) GetID() int32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func init() {
	proto.RegisterType((*Cluster)(nil), "ansible.Cluster")
	proto.RegisterType((*Service)(nil), "ansible.Service")
	proto.RegisterMapType((map[string]string)(nil), "ansible.Service.ConfigEntry")
	proto.RegisterType((*TaskStatus)(nil), "ansible.TaskStatus")
	proto.RegisterType((*NewID)(nil), "ansible.NewID")
}

func init() { proto.RegisterFile("protofile.proto", fileDescriptor_b28b201cc727c47d) }

var fileDescriptor_b28b201cc727c47d = []byte{
	// 474 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xad, 0x9d, 0xd8, 0x4e, 0x26, 0x50, 0xaa, 0x01, 0x95, 0x55, 0x84, 0x50, 0x64, 0x71, 0x88,
	0x04, 0x8a, 0x50, 0xca, 0xa1, 0x20, 0x71, 0x80, 0xb8, 0x2a, 0x96, 0x20, 0x42, 0x6e, 0xcb, 0xdd,
	0x85, 0x09, 0xb2, 0xea, 0xda, 0x96, 0x77, 0x53, 0xe4, 0xcf, 0xe0, 0x2f, 0xf9, 0x02, 0xce, 0x68,
	0x77, 0x27, 0xa9, 0x49, 0x7b, 0x48, 0x6e, 0xfb, 0xde, 0xec, 0xcc, 0x1b, 0xbf, 0xb7, 0x32, 0x3c,
	0xaa, 0xea, 0x52, 0x95, 0x8b, 0x2c, 0xa7, 0x89, 0x39, 0x61, 0x90, 0x16, 0x32, 0xbb, 0xcc, 0x29,
	0xfc, 0xed, 0x42, 0x30, 0xcb, 0x97, 0x52, 0x51, 0x8d, 0xfb, 0xe0, 0xc6, 0x91, 0x70, 0x46, 0xce,
	0xb8, 0x9f, 0xb8, 0x71, 0x84, 0x08, 0xdd, 0x79, 0x7a, 0x4d, 0xc2, 0x35, 0x8c, 0x39, 0xe3, 0x08,
	0x06, 0x51, 0x26, 0xab, 0x3c, 0x6d, 0x4c, 0xa9, 0x63, 0x4a, 0x6d, 0x0a, 0x05, 0x04, 0x9f, 0x4a,
	0xa9, 0x2e, 0x92, 0xcf, 0xa2, 0x6b, 0xaa, 0x2b, 0x88, 0x21, 0x3c, 0x38, 0x29, 0x54, 0xa6, 0x9a,
	0x33, 0x95, 0xaa, 0xa5, 0x14, 0x9e, 0x29, 0xff, 0xc7, 0xe9, 0xf9, 0xbc, 0xce, 0x79, 0x53, 0x91,
	0xf0, 0xed, 0xfc, 0x16, 0x85, 0xaf, 0xa0, 0x27, 0xa9, 0xbe, 0xc9, 0xbe, 0x93, 0x14, 0xc1, 0xa8,
	0x33, 0x1e, 0x4c, 0x0f, 0x26, 0xfc, 0x35, 0x93, 0x33, 0x5b, 0x48, 0xd6, 0x37, 0xf0, 0x10, 0xfc,
	0xb9, 0xd6, 0x97, 0xa2, 0x37, 0x72, 0xc6, 0x5e, 0xc2, 0x08, 0x87, 0xd0, 0xbb, 0x4e, 0xf5, 0xcc,
	0xf8, 0xab, 0xe8, 0x1b, 0x91, 0x35, 0x0e, 0xff, 0xba, 0x10, 0xf0, 0xa4, 0xad, 0x3c, 0x41, 0xe8,
	0x9a, 0x65, 0xad, 0x19, 0xe6, 0x8c, 0xcf, 0x01, 0x78, 0xe9, 0x84, 0x16, 0x6c, 0x44, 0x8b, 0xd1,
	0x5e, 0xb0, 0x84, 0xfe, 0x70, 0x5a, 0x79, 0xd1, 0xe6, 0xf4, 0x0c, 0xc6, 0xda, 0x4c, 0x6b, 0x45,
	0x8b, 0xc1, 0x37, 0xe0, 0xcf, 0xca, 0x62, 0x91, 0xfd, 0x64, 0x1f, 0x9e, 0x6d, 0xfa, 0x30, 0xb1,
	0xe5, 0x93, 0x42, 0xd5, 0x4d, 0xc2, 0x77, 0x37, 0x13, 0xec, 0xdd, 0x4d, 0x70, 0x33, 0xa7, 0xfe,
	0x3d, 0x39, 0x09, 0x08, 0xbe, 0x51, 0x2d, 0xb3, 0xb2, 0x10, 0x60, 0x53, 0x66, 0x38, 0x7c, 0x0b,
	0x83, 0x96, 0x2c, 0x1e, 0x40, 0xe7, 0x8a, 0x1a, 0x76, 0x50, 0x1f, 0xf1, 0x09, 0x78, 0x37, 0x69,
	0xbe, 0x5c, 0x79, 0x68, 0xc1, 0x3b, 0xf7, 0xd8, 0x09, 0x5f, 0x00, 0x9c, 0xa7, 0xf2, 0x8a, 0x25,
	0x0e, 0xc1, 0xe7, 0x05, 0x6c, 0x33, 0xa3, 0xf0, 0x29, 0x78, 0x73, 0xfa, 0x15, 0x47, 0xad, 0x6c,
	0x3c, 0x9d, 0xcd, 0xf4, 0x8f, 0x03, 0x0f, 0x3f, 0x58, 0x07, 0x92, 0x65, 0x51, 0x50, 0x8d, 0x47,
	0xe0, 0xcf, 0x6a, 0xd2, 0x5e, 0xde, 0xbe, 0x11, 0x0e, 0x61, 0xf8, 0x78, 0xcd, 0xdc, 0x6a, 0x86,
	0x7b, 0xaf, 0x1d, 0xdd, 0x14, 0x51, 0x4e, 0x3b, 0x37, 0x5d, 0x54, 0x3f, 0x76, 0x54, 0x3a, 0x86,
	0xc1, 0x29, 0xa9, 0x2f, 0xfc, 0xee, 0x76, 0xe8, 0x9c, 0x56, 0xe0, 0x46, 0x1f, 0xf1, 0x25, 0x78,
	0xa7, 0xa4, 0xe2, 0xe8, 0x9e, 0xce, 0xfd, 0x35, 0x63, 0xbc, 0x0a, 0xf7, 0xf0, 0x3d, 0xa0, 0xdd,
	0x90, 0xaf, 0xd8, 0x37, 0xb6, 0xad, 0xe6, 0xa5, 0x6f, 0x7e, 0x1c, 0x47, 0xff, 0x02, 0x00, 0x00,
	0xff, 0xff, 0x73, 0x37, 0x2c, 0x65, 0x4b, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AnsibleRunnerClient is the client API for AnsibleRunner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AnsibleRunnerClient interface {
	Create(ctx context.Context, in *Cluster, opts ...grpc.CallOption) (AnsibleRunner_CreateClient, error)
	Delete(ctx context.Context, in *Cluster, opts ...grpc.CallOption) (AnsibleRunner_DeleteClient, error)
	Update(ctx context.Context, in *Cluster, opts ...grpc.CallOption) (AnsibleRunner_UpdateClient, error)
	GetMasterIP(ctx context.Context, in *Cluster, opts ...grpc.CallOption) (AnsibleRunner_GetMasterIPClient, error)
}

type ansibleRunnerClient struct {
	cc *grpc.ClientConn
}

func NewAnsibleRunnerClient(cc *grpc.ClientConn) AnsibleRunnerClient {
	return &ansibleRunnerClient{cc}
}

func (c *ansibleRunnerClient) Create(ctx context.Context, in *Cluster, opts ...grpc.CallOption) (AnsibleRunner_CreateClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AnsibleRunner_serviceDesc.Streams[0], "/ansible.AnsibleRunner/Create", opts...)
	if err != nil {
		return nil, err
	}
	x := &ansibleRunnerCreateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AnsibleRunner_CreateClient interface {
	Recv() (*TaskStatus, error)
	grpc.ClientStream
}

type ansibleRunnerCreateClient struct {
	grpc.ClientStream
}

func (x *ansibleRunnerCreateClient) Recv() (*TaskStatus, error) {
	m := new(TaskStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ansibleRunnerClient) Delete(ctx context.Context, in *Cluster, opts ...grpc.CallOption) (AnsibleRunner_DeleteClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AnsibleRunner_serviceDesc.Streams[1], "/ansible.AnsibleRunner/Delete", opts...)
	if err != nil {
		return nil, err
	}
	x := &ansibleRunnerDeleteClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AnsibleRunner_DeleteClient interface {
	Recv() (*TaskStatus, error)
	grpc.ClientStream
}

type ansibleRunnerDeleteClient struct {
	grpc.ClientStream
}

func (x *ansibleRunnerDeleteClient) Recv() (*TaskStatus, error) {
	m := new(TaskStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ansibleRunnerClient) Update(ctx context.Context, in *Cluster, opts ...grpc.CallOption) (AnsibleRunner_UpdateClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AnsibleRunner_serviceDesc.Streams[2], "/ansible.AnsibleRunner/Update", opts...)
	if err != nil {
		return nil, err
	}
	x := &ansibleRunnerUpdateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AnsibleRunner_UpdateClient interface {
	Recv() (*TaskStatus, error)
	grpc.ClientStream
}

type ansibleRunnerUpdateClient struct {
	grpc.ClientStream
}

func (x *ansibleRunnerUpdateClient) Recv() (*TaskStatus, error) {
	m := new(TaskStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ansibleRunnerClient) GetMasterIP(ctx context.Context, in *Cluster, opts ...grpc.CallOption) (AnsibleRunner_GetMasterIPClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AnsibleRunner_serviceDesc.Streams[3], "/ansible.AnsibleRunner/GetMasterIP", opts...)
	if err != nil {
		return nil, err
	}
	x := &ansibleRunnerGetMasterIPClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AnsibleRunner_GetMasterIPClient interface {
	Recv() (*TaskStatus, error)
	grpc.ClientStream
}

type ansibleRunnerGetMasterIPClient struct {
	grpc.ClientStream
}

func (x *ansibleRunnerGetMasterIPClient) Recv() (*TaskStatus, error) {
	m := new(TaskStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AnsibleRunnerServer is the server API for AnsibleRunner service.
type AnsibleRunnerServer interface {
	Create(*Cluster, AnsibleRunner_CreateServer) error
	Delete(*Cluster, AnsibleRunner_DeleteServer) error
	Update(*Cluster, AnsibleRunner_UpdateServer) error
	GetMasterIP(*Cluster, AnsibleRunner_GetMasterIPServer) error
}

// UnimplementedAnsibleRunnerServer can be embedded to have forward compatible implementations.
type UnimplementedAnsibleRunnerServer struct {
}

func (*UnimplementedAnsibleRunnerServer) Create(req *Cluster, srv AnsibleRunner_CreateServer) error {
	return status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedAnsibleRunnerServer) Delete(req *Cluster, srv AnsibleRunner_DeleteServer) error {
	return status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedAnsibleRunnerServer) Update(req *Cluster, srv AnsibleRunner_UpdateServer) error {
	return status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedAnsibleRunnerServer) GetMasterIP(req *Cluster, srv AnsibleRunner_GetMasterIPServer) error {
	return status.Errorf(codes.Unimplemented, "method GetMasterIP not implemented")
}

func RegisterAnsibleRunnerServer(s *grpc.Server, srv AnsibleRunnerServer) {
	s.RegisterService(&_AnsibleRunner_serviceDesc, srv)
}

func _AnsibleRunner_Create_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Cluster)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AnsibleRunnerServer).Create(m, &ansibleRunnerCreateServer{stream})
}

type AnsibleRunner_CreateServer interface {
	Send(*TaskStatus) error
	grpc.ServerStream
}

type ansibleRunnerCreateServer struct {
	grpc.ServerStream
}

func (x *ansibleRunnerCreateServer) Send(m *TaskStatus) error {
	return x.ServerStream.SendMsg(m)
}

func _AnsibleRunner_Delete_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Cluster)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AnsibleRunnerServer).Delete(m, &ansibleRunnerDeleteServer{stream})
}

type AnsibleRunner_DeleteServer interface {
	Send(*TaskStatus) error
	grpc.ServerStream
}

type ansibleRunnerDeleteServer struct {
	grpc.ServerStream
}

func (x *ansibleRunnerDeleteServer) Send(m *TaskStatus) error {
	return x.ServerStream.SendMsg(m)
}

func _AnsibleRunner_Update_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Cluster)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AnsibleRunnerServer).Update(m, &ansibleRunnerUpdateServer{stream})
}

type AnsibleRunner_UpdateServer interface {
	Send(*TaskStatus) error
	grpc.ServerStream
}

type ansibleRunnerUpdateServer struct {
	grpc.ServerStream
}

func (x *ansibleRunnerUpdateServer) Send(m *TaskStatus) error {
	return x.ServerStream.SendMsg(m)
}

func _AnsibleRunner_GetMasterIP_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Cluster)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AnsibleRunnerServer).GetMasterIP(m, &ansibleRunnerGetMasterIPServer{stream})
}

type AnsibleRunner_GetMasterIPServer interface {
	Send(*TaskStatus) error
	grpc.ServerStream
}

type ansibleRunnerGetMasterIPServer struct {
	grpc.ServerStream
}

func (x *ansibleRunnerGetMasterIPServer) Send(m *TaskStatus) error {
	return x.ServerStream.SendMsg(m)
}

var _AnsibleRunner_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ansible.AnsibleRunner",
	HandlerType: (*AnsibleRunnerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Create",
			Handler:       _AnsibleRunner_Create_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Delete",
			Handler:       _AnsibleRunner_Delete_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Update",
			Handler:       _AnsibleRunner_Update_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetMasterIP",
			Handler:       _AnsibleRunner_GetMasterIP_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protofile.proto",
}

// DBClient is the client API for DB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DBClient interface {
	GetID(ctx context.Context, in *Cluster, opts ...grpc.CallOption) (*NewID, error)
	UpdateClusterState(ctx context.Context, in *Cluster, opts ...grpc.CallOption) (*TaskStatus, error)
}

type dBClient struct {
	cc *grpc.ClientConn
}

func NewDBClient(cc *grpc.ClientConn) DBClient {
	return &dBClient{cc}
}

func (c *dBClient) GetID(ctx context.Context, in *Cluster, opts ...grpc.CallOption) (*NewID, error) {
	out := new(NewID)
	err := c.cc.Invoke(ctx, "/ansible.DB/GetID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBClient) UpdateClusterState(ctx context.Context, in *Cluster, opts ...grpc.CallOption) (*TaskStatus, error) {
	out := new(TaskStatus)
	err := c.cc.Invoke(ctx, "/ansible.DB/UpdateClusterState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DBServer is the server API for DB service.
type DBServer interface {
	GetID(context.Context, *Cluster) (*NewID, error)
	UpdateClusterState(context.Context, *Cluster) (*TaskStatus, error)
}

// UnimplementedDBServer can be embedded to have forward compatible implementations.
type UnimplementedDBServer struct {
}

func (*UnimplementedDBServer) GetID(ctx context.Context, req *Cluster) (*NewID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetID not implemented")
}
func (*UnimplementedDBServer) UpdateClusterState(ctx context.Context, req *Cluster) (*TaskStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClusterState not implemented")
}

func RegisterDBServer(s *grpc.Server, srv DBServer) {
	s.RegisterService(&_DB_serviceDesc, srv)
}

func _DB_GetID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServer).GetID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ansible.DB/GetID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServer).GetID(ctx, req.(*Cluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _DB_UpdateClusterState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServer).UpdateClusterState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ansible.DB/UpdateClusterState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServer).UpdateClusterState(ctx, req.(*Cluster))
	}
	return interceptor(ctx, in, info, handler)
}

var _DB_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ansible.DB",
	HandlerType: (*DBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetID",
			Handler:    _DB_GetID_Handler,
		},
		{
			MethodName: "UpdateClusterState",
			Handler:    _DB_UpdateClusterState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protofile.proto",
}
