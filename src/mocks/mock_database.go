// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.at.ispras.ru/openstack_bigdata_tools/spark-openstack/src/database (interfaces: Database)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	protobuf "gitlab.at.ispras.ru/openstack_bigdata_tools/spark-openstack/src/protobuf"
	reflect "reflect"
)

// MockDatabase is a mock of Database interface
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// DeleteCluster mocks base method
func (m *MockDatabase) DeleteCluster(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCluster", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCluster indicates an expected call of DeleteCluster
func (mr *MockDatabaseMockRecorder) DeleteCluster(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCluster", reflect.TypeOf((*MockDatabase)(nil).DeleteCluster), arg0)
}

// DeleteProject mocks base method
func (m *MockDatabase) DeleteProject(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProject", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProject indicates an expected call of DeleteProject
func (mr *MockDatabaseMockRecorder) DeleteProject(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProject", reflect.TypeOf((*MockDatabase)(nil).DeleteProject), arg0)
}

// DeleteTemplate mocks base method
func (m *MockDatabase) DeleteTemplate(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTemplate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTemplate indicates an expected call of DeleteTemplate
func (mr *MockDatabaseMockRecorder) DeleteTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTemplate", reflect.TypeOf((*MockDatabase)(nil).DeleteTemplate), arg0)
}

// ListProjects mocks base method
func (m *MockDatabase) ListProjects() ([]protobuf.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProjects")
	ret0, _ := ret[0].([]protobuf.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProjects indicates an expected call of ListProjects
func (mr *MockDatabaseMockRecorder) ListProjects() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjects", reflect.TypeOf((*MockDatabase)(nil).ListProjects))
}

// ListTemplates mocks base method
func (m *MockDatabase) ListTemplates(arg0 string) ([]protobuf.Template, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTemplates", arg0)
	ret0, _ := ret[0].([]protobuf.Template)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTemplates indicates an expected call of ListTemplates
func (mr *MockDatabaseMockRecorder) ListTemplates(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTemplates", reflect.TypeOf((*MockDatabase)(nil).ListTemplates), arg0)
}

// ReadCluster mocks base method
func (m *MockDatabase) ReadCluster(arg0 string) (*protobuf.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadCluster", arg0)
	ret0, _ := ret[0].(*protobuf.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadCluster indicates an expected call of ReadCluster
func (mr *MockDatabaseMockRecorder) ReadCluster(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadCluster", reflect.TypeOf((*MockDatabase)(nil).ReadCluster), arg0)
}

// ReadClusterByName mocks base method
func (m *MockDatabase) ReadClusterByName(arg0, arg1 string) (*protobuf.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadClusterByName", arg0, arg1)
	ret0, _ := ret[0].(*protobuf.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadClusterByName indicates an expected call of ReadClusterByName
func (mr *MockDatabaseMockRecorder) ReadClusterByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadClusterByName", reflect.TypeOf((*MockDatabase)(nil).ReadClusterByName), arg0, arg1)
}

// ReadProject mocks base method
func (m *MockDatabase) ReadProject(arg0 string) (*protobuf.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadProject", arg0)
	ret0, _ := ret[0].(*protobuf.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadProject indicates an expected call of ReadProject
func (mr *MockDatabaseMockRecorder) ReadProject(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadProject", reflect.TypeOf((*MockDatabase)(nil).ReadProject), arg0)
}

// ReadProjectByName mocks base method
func (m *MockDatabase) ReadProjectByName(arg0 string) (*protobuf.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadProjectByName", arg0)
	ret0, _ := ret[0].(*protobuf.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadProjectByName indicates an expected call of ReadProjectByName
func (mr *MockDatabaseMockRecorder) ReadProjectByName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadProjectByName", reflect.TypeOf((*MockDatabase)(nil).ReadProjectByName), arg0)
}

// ReadProjectClusters mocks base method
func (m *MockDatabase) ReadProjectClusters(arg0 string) ([]protobuf.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadProjectClusters", arg0)
	ret0, _ := ret[0].([]protobuf.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadProjectClusters indicates an expected call of ReadProjectClusters
func (mr *MockDatabaseMockRecorder) ReadProjectClusters(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadProjectClusters", reflect.TypeOf((*MockDatabase)(nil).ReadProjectClusters), arg0)
}

// ReadTemplate mocks base method
func (m *MockDatabase) ReadTemplate(arg0, arg1 string) (*protobuf.Template, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadTemplate", arg0, arg1)
	ret0, _ := ret[0].(*protobuf.Template)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadTemplate indicates an expected call of ReadTemplate
func (mr *MockDatabaseMockRecorder) ReadTemplate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadTemplate", reflect.TypeOf((*MockDatabase)(nil).ReadTemplate), arg0, arg1)
}

// ReadTemplateByName mocks base method
func (m *MockDatabase) ReadTemplateByName(arg0 string) (*protobuf.Template, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadTemplateByName", arg0)
	ret0, _ := ret[0].(*protobuf.Template)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadTemplateByName indicates an expected call of ReadTemplateByName
func (mr *MockDatabaseMockRecorder) ReadTemplateByName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadTemplateByName", reflect.TypeOf((*MockDatabase)(nil).ReadTemplateByName), arg0)
}

// UpdateCluster mocks base method
func (m *MockDatabase) UpdateCluster(arg0 *protobuf.Cluster) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCluster", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCluster indicates an expected call of UpdateCluster
func (mr *MockDatabaseMockRecorder) UpdateCluster(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCluster", reflect.TypeOf((*MockDatabase)(nil).UpdateCluster), arg0)
}

// UpdateProject mocks base method
func (m *MockDatabase) UpdateProject(arg0 *protobuf.Project) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProject", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProject indicates an expected call of UpdateProject
func (mr *MockDatabaseMockRecorder) UpdateProject(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProject", reflect.TypeOf((*MockDatabase)(nil).UpdateProject), arg0)
}

// WriteCluster mocks base method
func (m *MockDatabase) WriteCluster(arg0 *protobuf.Cluster) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteCluster", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteCluster indicates an expected call of WriteCluster
func (mr *MockDatabaseMockRecorder) WriteCluster(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteCluster", reflect.TypeOf((*MockDatabase)(nil).WriteCluster), arg0)
}

// WriteProject mocks base method
func (m *MockDatabase) WriteProject(arg0 *protobuf.Project) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteProject", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteProject indicates an expected call of WriteProject
func (mr *MockDatabaseMockRecorder) WriteProject(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteProject", reflect.TypeOf((*MockDatabase)(nil).WriteProject), arg0)
}

// WriteTemplate mocks base method
func (m *MockDatabase) WriteTemplate(arg0 *protobuf.Template) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteTemplate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteTemplate indicates an expected call of WriteTemplate
func (mr *MockDatabaseMockRecorder) WriteTemplate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteTemplate", reflect.TypeOf((*MockDatabase)(nil).WriteTemplate), arg0)
}