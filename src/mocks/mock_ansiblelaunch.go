// Code generated by MockGen. DO NOT EDIT.
// Source: services/ansible_service/ansible_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	protobuf "gitlab.at.ispras.ru/openstack_bigdata_tools/spark-openstack/src/protobuf"
	utils "gitlab.at.ispras.ru/openstack_bigdata_tools/spark-openstack/src/utils"
	reflect "reflect"
)

// MockansibleLaunch is a mock of ansibleLaunch interface
type MockansibleLaunch struct {
	ctrl     *gomock.Controller
	recorder *MockansibleLaunchMockRecorder
}

// MockansibleLaunchMockRecorder is the mock recorder for MockansibleLaunch
type MockansibleLaunchMockRecorder struct {
	mock *MockansibleLaunch
}

// NewMockansibleLaunch creates a new mock instance
func NewMockansibleLaunch(ctrl *gomock.Controller) *MockansibleLaunch {
	mock := &MockansibleLaunch{ctrl: ctrl}
	mock.recorder = &MockansibleLaunchMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockansibleLaunch) EXPECT() *MockansibleLaunchMockRecorder {
	return m.recorder
}

// Run mocks base method
func (m *MockansibleLaunch) Run(c *protobuf.Cluster, osCreds *utils.OsCredentials, osConfig *utils.OsConfig, action string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", c, osCreds, osConfig, action)
	ret0, _ := ret[0].(string)
	return ret0
}

// Run indicates an expected call of Run
func (mr *MockansibleLaunchMockRecorder) Run(c, osCreds, osConfig, action interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockansibleLaunch)(nil).Run), c, osCreds, osConfig, action)
}
