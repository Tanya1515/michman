swagger: "2.0"
info:
  version: 0.1.0
  title: Openstack Big Data tools
  description: "Данная система предоставляет REST API для создания кластеров с заданным списком зарегестрированных сервисов в облачной среде OpenStack."
  license:
    name: License Here
  #    url:
  contact:
    email: modis@ispras.ru
host: host.here.com
basePath: /home
schemes:
  - http
  - https
tags:
  - name: projects
  - name: cluster
  - name: hosts
  - name: services
  - name: configs
  - name: templates
  - name: logs
paths:
  /projects:
    get:
      tags:
        - projects
      summary: Возвращает список зарегестрированных в системе проектов
      operationId: listProjects
      parameters:
        - name: view
          in: query
          type: string
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Projects'
    post:
      tags:
        - projects
      summary: Создание нового проекта системы
      description: Создание нового проекта системы
      operationId: createProject
      parameters:
        - name: project
          in: body
          schema:
            $ref: '#/definitions/Project'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Project'
  /projects/{projectId}:
    get:
      tags:
        - projects
      summary: Получение информации о выбранном проекте
      operationId: ProjectGet
      parameters:
        - name: projectId
          description: "ID проекта."
          in: path
          type: string
          required: true
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Project'
    put:
      tags:
        - projects
      summary: Обновление информации о проекте
      description: Обновление информации о проекте
      operationId: updateProject
      parameters:
        - name: project
          in: body
          schema:
            $ref: '#/definitions/Project'
        - name: projectId
          description: "ID проекта."
          in: path
          type: string
          required: true
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Project'
    delete:
      tags:
        - projects
      summary: Удаление проекта системы
      operationId: deleteProject
      parameters:
        - name: projectId
          description: "ID проекта."
          in: path
          type: string
          required: true
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Project'

  /projects/{projectId}/clusters:
    get:
      tags:
        - cluster
      summary: Список всех кластеров проекта
      description: "Метод возращает список существующих кластеров.
                    Предусмотрены возможности типизации кластеров и формирования краткого описания.
                    Пример ответа требует доработки."
      operationId: ClustersList
      parameters:
        - name: clusterType
          description: "Тип кластера. Возможные значения: any (все), base (основные), compute (вычислительный). Значение по умолчанию - base"
          type: string
          default: base
          in: query
        - name: view
          description: "Полнота описания. Возможные значения: full (полное), summary (краткое). Значение по умолчанию - summary"
          type: string
          default: summary
          in: query
        - name: projectId
          description: "ID проекта."
          in: path
          type: string
          required: true
      produces:
        - application/json
      responses:
        200:
          description: "Ok. Возвращает список кластеров указанного проекта"
          schema:
            $ref: '#/definitions/Clusters'
        204:
          description: "Нет результатов, соответствующих запросу."
        400:
          description: "Некорректный запрос, проверьте параметры"
        401:
          description: "Не пройдена авторизация"
        403:
          description: "Не достаточно прав"
        404:
          description: "Not found. (может заменять 401, 403)"

    post:
      tags:
        - cluster
      summary: Создание нового кластера внутри проекта
      description: "Метод создает кластеры по описаниям, переданным в теле запроса.
                    При создании кластера можно указать список сервисов, которые должны быть развернуты на указанном кластере.
                    В качестве ответа возвращается структура созданного кластера, находящегося на этапе развертывания. Статус такого кластера установлен как INITED"
      operationId: ClustersCreate
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: configuration
          in: body
          schema:
            $ref: '#/definitions/Cluster'
        - name: projectId
          description: "ID проекта."
          in: path
          type: string
          required: true
      responses:
        200:
          description: "OK"
        201:
          description: "OK. Возвращается структура созданного кластера, находящегося на этапе развертывания. Статус такого кластера установлен как INITED."
          schema:
            $ref: '#/definitions/Clusters'
        202:
          description: "OK. Запрос в обработке"
          schema:
            $ref: '#/definitions/Cluster'
        204:
          description: "Нет результатов, соответствующих запросу."
        400:
          description: "Некорректный запрос, проверьте параметры"
        401:
          description: "Не пройдена авторизация"
        403:
          description: "Не достаточно прав"
        404:
          description: "Not found. (может заменять 401, 403)"

  /projects/{projectId}/clusters/{clusterName}:
    get:
      tags:
        - cluster
      summary: Получение информации о конкретном кластере
      description: "Метод возращает список кластер с именем clusterName."
      operationId: ClustersGet
      parameters:
        - name: clusterName
          description: "Имя кластера."
          in: path
          type: string
          required: true
        - name: projectId
          description: "ID проекта."
          in: path
          type: string
          required: true
      produces:
        - application/json
      responses:
        200:
          description: "OK"
          schema:
            $ref: '#/definitions/Cluster'
        204:
          description: "Нет результатов, соответствующих запросу."
        400:
          description: "Некорректный запрос, проверьте параметры"
        401:
          description: "Не пройдена авторизация"
        403:
          description: "Не достаточно прав"
        404:
          description: "Not found. (может заменять 401, 403)"
    put:
      tags:
        - cluster
      summary: Обновление конфигурации существующего кластера
      operationId: updateCluster
      parameters:
        - name: clusterName
          in: path
          type: string
          required: true
        - name: configuration
          in: body
          schema:
            $ref: '#/definitions/Cluster'
        - name: projectId
          description: "ID проекта."
          in: path
          type: string
          required: true
      responses:
        200:
          description: OK
    delete:
      tags:
        - cluster
      summary: Удаленние существующего кластера
      operationId: deleteCluster
      parameters:
        - name: clusterName
          type: string
          in: path
          required: true
        - name: projectId
          description: "ID проекта."
          in: path
          type: string
          required: true
      responses:
        200:
          description: OK
  /projects/{projectId}/clusters/{clusterName}/status:
    get:
      tags:
        - cluster
      summary: Получение информации о статусе конкретного кластера
      description: "Метод возращает статус кластера с именем clusterName."
      parameters:
        - name: clusterName
          description: "Имя кластера."
          in: path
          type: string
          required: true
        - name: projectId
          description: "ID проекта."
          in: path
          type: string
          required: true
      produces:
        - application/json
      responses:
        200:
          description: "OK"
  /projects/{projectId}/cluster/{clusterName}/export:
    get:
      tags:
        - cluster
      summary: Получение шаблона указанного кластера
      description: Получение шаблона указанного кластера
      operationId: exportCluster
      parameters:
        - name: clusterName
          in: path
          required: true
          type: string
        - name: exportAutoConfig
          in: query
          type: boolean
          description: Export configs set by the auto configuration
        - name: projectId
          description: "ID проекта."
          in: path
          type: string
          required: true
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Template'
    post:
      tags:
        - cluster
      summary: Создание шаблона по указанному кластеру
      description: Создание шаблона по указанному кластеру
      operationId: exportClusterAndSave
      parameters:
        - name: clusterName
          in: path
          required: true
          type: string
        - name: exportAutoConfig
          in: query
          type: boolean
          description: Export configs set by the auto configuration
        - name: projectId
          description: "ID проекта."
          in: path
          type: string
          required: true
        - name: templateName
          in: query
          type: string
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Template'

  /projects/{projectId}/clusters/{clusterName}/hosts:
    get:
      tags:
        - cluster
        - hosts
      summary: Список IP-адресов хостов, ассоциированных с указанным кластером
      operationId: getClusterHosts
      parameters:
        - name: clusterName
          in: path
          required: true
          type: string
        - name: projectId
          description: "ID проекта."
          in: path
          type: string
          required: true
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Hosts'

  /projects/{projectId}/clusters/{clusterName}/serviceTypes:
    get:
      tags:
        - cluster
        - services
      summary: Список типов сервисов, развернутых на указанном кластере
      operationId: listsClusterServices
      parameters:
        - name: clusterName
          in: path
          required: true
          type: string
        - name: projectId
          description: "ID проекта."
          in: path
          type: string
          required: true
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/ServiceTypes'

  /projects/{projectId}/clusters/{clusterName}/services:
    get:
      tags:
        - cluster
        - services
      summary: Список всех сервисов, развернутых на указанном кластере
      operationId: clusterListServices
      parameters:
        - name: clusterName
          in: path
          required: true
          type: string
        - name: view
          in: query
          type: string
        - name: projectId
          description: "ID проекта."
          in: path
          type: string
          required: true
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Services'
    post:
      tags:
        - cluster
        - services
      summary: Creates a list of services.
      operationId: clusterCreateServices
      parameters:
        - name: clusterName
          in: path
          required: true
          type: string
        - name: projectId
          description: "ID проекта."
          in: path
          type: string
          required: true
        - name: configuration
          in: body
          schema:
            $ref: '#/definitions/Service'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Service'

  /projects/{projectId}/clusters/{clusterName}/services/{serviceName}:
    get:
      tags:
        - cluster
        - services
      summary: Получение информации об указанном сервисе
      operationId: clusterGetServiceInfo
      parameters:
        - name: clusterName
          in: path
          required: true
          type: string
        - name: serviceName
          in: path
          required: true
          type: string
        - name: view
          in: query
          type: string
        - name: projectId
          description: "ID проекта."
          in: path
          type: string
          required: true
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Service'
    put:
      tags:
        - cluster
        - services
      summary: Обновление информации указанного сервиса
      operationId: clusterUpdateServiceInfo
      parameters:
        - name: clusterName
          in: path
          required: true
          type: string
        - name: serviceName
          in: path
          required: true
          type: string
        - name: projectId
          description: "ID проекта."
          in: path
          type: string
          required: true
        - name: configuration
          in: body
          schema:
            $ref: '#/definitions/Service'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Service'

  /templates:
    get:
      tags:
        - templates
      summary: Возвращает список шаблонов готовых кластеров, общих для всей системы и созданных администраторами системы.
      description: Возвращает список шаблонов готовых кластеров, общих для всей системы и созданных администраторами системы.
      operationId: templatesList
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Templates'

    post:
      tags:
        - templates
      summary: Создается шаблон готового кластера. Шаблон доступен для всех пользователей системы и создается администраторами системы.
      description: Создается шаблон готового кластера. Шаблон доступен для всех пользователей системы и создается администраторами системы.
      operationId: templatesCreate
      parameters:
        - name: clusterTemplate
          in: body
          schema:
            $ref: '#/definitions/Template'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Template'

  /templates/{templateId}:
    get:
      tags:
        - templates
      summary: Возвращает шаблон готового кластера.
      description: Возвращает шаблон готового кластера.
      operationId: templatesGet
      parameters:
        - name: templateId
          description: "ID шаблона."
          in: path
          type: string
          required: true
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Template'

    put:
      tags:
        - templates
      summary: Обновление шаблона готового кластера. Шаблон обновляется администраторами системы.
      description: Обновление шаблона готового кластера. Шаблон обновляется администраторами системы.
      operationId: templatesUpdate
      parameters:
        - name: templateId
          description: "ID шаблона."
          in: path
          type: string
          required: true
        - name: clusterTemplate
          in: body
          schema:
            $ref: '#/definitions/Template'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Template'
    delete:
      tags:
        - templates
      summary: Удаление шаблона системы
      operationId: templatesDelete
      parameters:
        - name: templateId
          description: "ID шаблона."
          in: path
          type: string
          required: true
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Template'

  /projects/{projectId}/templates:
    get:
      tags:
        - templates
      summary: Возвращает список шаблонов готовых кластеров, созданных внутри конкретного проекта.
      description: Возвращает список шаблонов готовых кластеров, созданных внутри конкретного проекта.
      operationId: projectTemplatesList
      parameters:
        - name: projectId
          description: "ID проекта."
          in: path
          type: string
          required: true
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Templates'

    post:
      tags:
        - templates
      summary: Создается шаблон готового кластера. Шаблон доступен для всех пользователей проекта и создается участником проекта.
      description: Создается шаблон готового кластера. Шаблон доступен для всех пользователей проекта и создается участником проекта.
      operationId: projectTemplatesCreate
      parameters:
        - name: clusterTemplate
          in: body
          schema:
            $ref: '#/definitions/Template'
        - name: projectId
          description: "ID проекта."
          in: path
          type: string
          required: true
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Template'

  /projects/{projectId}/templates/{templateId}:
    get:
      tags:
        - templates
      summary: Возвращает шаблон готового кластера.
      description: Возвращает шаблон готового кластера.
      operationId: projectTemplatesGet
      parameters:
        - name: projectId
          description: "ID проекта."
          in: path
          type: string
          required: true
        - name: templateId
          description: "ID шаблона."
          in: path
          type: string
          required: true
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Template'

    put:
      tags:
        - templates
      summary: Обновление шаблона готового кластера. Шаблон обновляется участниками проекта.
      description: Обновление шаблона готового кластера. Шаблон обновляется участниками проекта.
      operationId: projectTemplatesUpdate
      parameters:
        - name: clusterTemplate
          in: body
          schema:
            $ref: '#/definitions/Template'
        - name: projectId
          description: "ID проекта."
          in: path
          type: string
          required: true
        - name: templateId
          description: "ID шаблона."
          in: path
          type: string
          required: true
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Template'
    delete:
      tags:
        - templates
      summary: Удаление шаблона системы
      operationId: projectTemplatesDelete
      parameters:
        - name: projectId
          description: "ID проекта."
          in: path
          type: string
          required: true
        - name: templateId
          description: "ID шаблона."
          in: path
          type: string
          required: true
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Template'
  /configs:
    get:
      tags:
        - configs
      summary: Возвращает список поддерживаемых в системе типов сервисов.
      description: Возвращает список поддерживаемых в системе типов сервисов.
      operationId: ConfigList
      parameters:
        - name: view
          description: "Полнота описания. Возможные значения: full (полное), summary (краткое). Значение по умолчанию - summary"
          type: string
          default: summary
          in: query
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/ServiceConfigs'

    post:
      tags:
        - configs
      summary: Создается новый тип поддерживаемого в системе сервиса. В запросе указывается тип нового сервиса и список поддерживаемых версий и конфигураций для каждой версии.
      description: Создается новый тип поддерживаемого в системе сервиса. В запросе указывается тип нового сервиса и список поддерживаемых версий и конфигураций для каждой версии.
      operationId: ConfigCreate
      parameters:
        - name: serviceConfig
          in: body
          schema:
            $ref: '#/definitions/ServiceConfig'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/ServiceConfig'

  /configs/{serviceType}:
    get:
      tags:
        - configs
      summary: Возвращает информацию об указанном типе сервиса.
      description: Возвращает информацию об указанном типе сервиса.
      operationId: configGet
      parameters:
        - name: view
          description: "Полнота описания. Возможные значения: full (полное), summary (краткое). Значение по умолчанию - summary"
          type: string
          default: summary
          in: query
        - name: serviceType
          description: "Тип сервиса."
          in: path
          type: string
          required: true
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/ServiceConfig'
    put:
      tags:
        - templates
      summary: Обновление информации о типе сервиса.
      description: Обновление информации о типе сервиса.
      operationId: configsUpdate
      parameters:
        - name: serviceType
          description: "Тип сервиса."
          in: path
          type: string
          required: true
        - name: serviceConfig
          in: body
          schema:
            $ref: '#/definitions/ServiceConfig'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Template'
    delete:
      tags:
        - configs
      summary: Удаление типа сервиса из системы.
      description: Удаление типа сервиса из системы.
      operationId: configDelete
      parameters:
        - name: serviceType
          description: "Тип сервиса."
          in: path
          type: string
          required: true
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/ServiceConfig'
  /configs/{serviceType}/versions:
    get:
      tags:
        - configs
      summary: Возвращает информацию о доступных в системе версиях указанного сервиса.
      description: Возвращает информацию о доступных в системе версиях указанного сервиса.
      operationId: configVersionsList
      parameters:
        - name: view
          description: "Полнота описания. Возможные значения: full (полное), summary (краткое). Значение по умолчанию - summary"
          type: string
          default: summary
          in: query
        - name: serviceType
          description: "Тип сервиса."
          in: path
          type: string
          required: true
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/ServiceConfigVersions'

    post:
      tags:
        - configs
      summary: Создание новой версии указанного типа сервиса.
      description: Создание новой версии указанного типа сервиса.
      operationId: configVersionCreate
      parameters:
        - name: serviceType
          description: "Тип сервиса."
          in: path
          type: string
          required: true
        - name: serviceConfigVersion
          in: body
          schema:
            $ref: '#/definitions/ServiceConfigVersion'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/ServiceConfigVersion'

  /configs/{serviceType}/versions/{versionId}:
    get:
      tags:
        - configs
      summary: Возвращает информацию об указанной версии сервиса.
      description: Возвращает информацию об указанной версии сервиса.
      operationId: configVersionsGet
      parameters:
        - name: serviceType
          description: "Тип сервиса."
          in: path
          type: string
          required: true
        - name: versionId
          description: "ID версии сервиса."
          in: path
          type: string
          required: true
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/ServiceConfigVersion'
    put:
      tags:
        - configs
      summary: Обновление версии указанного типа сервиса.
      description: Обновление версии указанного типа сервиса.
      operationId: configVersionUpdate
      parameters:
        - name: serviceType
          description: "Тип сервиса."
          in: path
          type: string
          required: true
        - name: versionId
          description: "ID версии сервиса."
          in: path
          type: string
          required: true
        - name: serviceConfigVersion
          in: body
          schema:
            $ref: '#/definitions/ServiceConfigVersion'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/ServiceConfigVersion'
    delete:
      tags:
        - configs
      summary: Удаление указанной версии сервиса.
      description: Удаление указанной версии сервиса.
      operationId: configVersionsDelete
      parameters:
        - name: serviceType
          description: "Тип сервиса."
          in: path
          type: string
          required: true
        - name: versionId
          description: "ID версии сервиса."
          in: path
          type: string
          required: true
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/ServiceConfigVersion'
  /logs/http_server:
    get:
      tags:
        - logs
      summary: Возвращает лог http сервера.
      description: Возвращает лог http сервера.
      responses:
        200:
          description: OK
  /logs/ansible_service:
    get:
      tags:
        - logs
      summary: Возвращает лог сервиса, отправляющего запросы ansible.
      description: Возвращает лог сервиса, отправляющего запросы ansible.
      responses:
        200:
          description: OK
  /logs/ansible_output:
    get:
      tags:
        - logs
      summary: Возвращает лог выполнения последнего ansible сценария.
      description: Возвращает лог выполнения последнего ansible сценария.
      responses:
        200:
          description: OK

definitions:
  Clusters:
    type: object
    example:
      {
        "items":[
        {
          "ID":"uuid",
          "ProjectID":"projectUuid",
          "Name":"clusterName-projectName",
          "DisplayName":"name",
          "EntityStatus":"status",
          "Services":[
          {
            "ID":"uuid",
            "Name":"serviceName",
            "DisplayName":"name",
            "EntityStatus":"status",
            "Type":"serviceType",
            "Version":"version",
            "Config":{

            },
            "Description":"someDescription",
            "URL": "serviceURL"
          }
          ],
          "NHosts":3,
          "MasterIP": "masterHost",
          "Description":"someDescription"
        }
        ]
      }
  Cluster:
    type: object
    example:
      {
        "ID":"uuid",
        "ProjectID":"projectUuid",
        "Name":"clusterName-projectName",
        "DisplayName":"name",
        "EntityStatus":"status",
        "Services":[
        {
          "ID":"uuid",
          "Name":"serviceName",
          "DisplayName":"name",
          "EntityStatus":"status",
          "Type":"serviceType",
          "Version":"version",
          "Config":{

          },
          "Description":"someDescription",
          "URL": "serviceURL"
        }
        ],
        "NHosts":3,
        "MasterIP": "masterHost",
        "Description":"someDescription"
      }
  Services:
    type: object
    example:
      {
        "items":[
        {
          "ID":"uuid",
          "Name":"serviceName",
          "DisplayName":"name",
          "EntityStatus":"status",
          "Type":"serviceType",
          "Version":"version",
          "Config":{

          },
          "Description":"someDescription",
          "URL": "serviceURL"
        }
        ]
      }
  Service:
    type: object
    example:
      {
        "ID":"uuid",
        "Name":"serviceName",
        "DisplayName":"name",
        "EntityStatus":"status",
        "Type":"serviceType",
        "Version":"version",
        "Config":{

        },
        "Description":"someDescription",
        "URL": "serviceURL"
      }
  Hosts:
    type: object
    example:
      {
        "Hosts":[
          "host1",
          "host2",
          "host3"
        ]
      }
  ServiceTypes:
    type: object
    example:
      {
        "ServiceTypes":[
          "spark",
          "jupyter",
          "cassandra"
        ]
      }
  Projects:
    type: object
    example:
      {
        "items":
          [
          {
            "ID":"uuid",
            "Name":"projectName",
            "DisplayName":"projectName",
            "GroupId": "id",
            "Description": "someDescription"
          }
          ]
      }
  Project:
    type: object
    example:
      {
        "ID":"uuid",
        "Name":"projectName",
        "DisplayName":"projectName",
        "GroupId": "id",
        "Description": "someDescription"
      }
  Templates:
    type: object
    example:
      {
        "items":[
        {
          "ID":"templateUuid",
          "ProjectID":"projectUuid",
          "Name":"templateName-projectName",
          "DisplayName":"name",
          "Services":[
          {
            "DisplayName":"name",
            "Type":"serviceType",
            "Version":"version",
            "Config":{

            },
            "Description":"someDescription"
          }
          ],
          "NHosts":3,
          "Description":"someDescription"
        }
        ]
      }
  Template:
    type: object
    example:
      {
        "ID":"templateUuid",
        "ProjectID":"projectUuid",
        "Name":"templateName-projectName",
        "DisplayName":"name",
        "Services":[
        {
          "DisplayName":"name",
          "Type":"serviceType",
          "Version":"version",
          "Config":{

          },
          "Description":"someDescription"
        }
        ],
        "NHosts":3,
        "Description":"someDescription"
      }
  ServiceConfigs:
    type: object
    example:
      {

      }
  ServiceConfig:
    type: object
    example:
      {

      }
  ServiceConfigVersion:
    type: object
    example:
      {

      }
  ServiceConfigVersions:
    type: object
    example:
      {

      }